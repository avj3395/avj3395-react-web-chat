{"version":3,"sources":["firebaseConfig.js","Sidebarchat.js","StateProvider.js","Sidebar.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Sidebarchat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomname","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","type","placeholder","room","key","Chat","input","setInput","roomId","useParams","roomName","setRoomName","Date","length","timestamp","toDate","toUTCString","displayName","onChange","e","target","preventDefault","console","log","FieldValue","serverTimestamp","actionType","state","action","Login","dispatch","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c95925b1.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyA2o7zUpvt9RN0WUaLguq3jnba-zFbSj3U\",\r\n    authDomain: \"whats-app-clone-cb867.firebaseapp.com\",\r\n    databaseURL: \"https://whats-app-clone-cb867.firebaseio.com\",\r\n    projectId: \"whats-app-clone-cb867\",\r\n    storageBucket: \"whats-app-clone-cb867.appspot.com\",\r\n    messagingSenderId: \"400179933543\",\r\n    appId: \"1:400179933543:web:d72e4c366b773d451dbfc2\",\r\n    measurementId: \"G-G0F0548QZX\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const db = firebaseApp.firestore();\r\n  const auth = firebase.auth();\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  export {auth, provider};\r\n  export default db;","import React, { useState, useEffect } from \"react\";\r\nimport \"./Sidebarchat.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport db from \"./firebaseConfig\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Sidebarchat({ id, name, addNewChat }) {\r\n  const [seed, setSeed] = useState(\"\");\r\n  const [messages,setMessages] = useState(\"\");\r\n\r\n  useEffect(() =>{\r\n    if(id){\r\n      db.collection(\"rooms\")\r\n        .doc(id)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\",\"desc\")\r\n        .onSnapshot((snapshot) => \r\n        setMessages(snapshot.docs.map((doc) =>\r\n        doc.data())));\r\n    }\r\n  },[id]);\r\n\r\n\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 5000));\r\n  }, []);\r\n\r\n  const createChat = () => {\r\n    const roomname = prompt(\"please enter name for chat\");\r\n    if (roomname) {\r\n      // add new group in db\r\n      db.collection(\"rooms\").add({\r\n        name: roomname,\r\n      });\r\n    }\r\n  };\r\n\r\n  return !addNewChat ? (\r\n    <Link to={`/rooms/${id}`}>\r\n      <div className=\"sidebarChat\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/ ${seed}.svg`} />\r\n        <div className=\"sidebarChat_info\">\r\n          <h2>{name}</h2>\r\n          <p>{messages[0]?.message}</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  ) : (\r\n    <div onClick={createChat} className=\"sidebarChat\">\r\n      <h2>Add new Chat</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebarchat;\r\n","import React, { createContext, useReducer, useContext } from \"react\";\r\n\r\n\r\nexport const StateContext = createContext();\r\nexport const StateProvider =({reducer, initialState, children}) => (\r\n    <StateContext.Provider \r\n    value={useReducer(reducer, initialState)}>\r\n    {children}\r\n    </StateContext.Provider>);\r\n\r\n    export const useStateValue = () => useContext(StateContext);","import React, { useState, useEffect } from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport Sidebarchat from \"./Sidebarchat\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport db from \"./firebaseConfig\";\r\nimport { useStateValue } from './StateProvider';\r\nfunction Sidebar() {\r\n  const [rooms, setRooms] = useState([]);\r\n  const [{user}, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n   const unsubscribe =  db.collection('rooms').onSnapshot(snapshot => (\r\n      setRooms(snapshot.docs.map(doc =>({\r\n        id: doc.id,\r\n        data: doc.data(),\r\n      })))\r\n    ));\r\n\r\n    return () =>{\r\n      unsubscribe();\r\n    }\r\n\r\n  },[]);\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar_header\">\r\n        <Avatar src={user?.photoURL} />\r\n        <div className=\"sidebar_header_right\">\r\n          <IconButton>\r\n            <DonutLargeIcon />\r\n          </IconButton>\r\n\r\n          <IconButton>\r\n            <ChatIcon />\r\n          </IconButton>\r\n\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar_search\">\r\n          <div className=\"sidebar_search_container\">\r\n              <SearchIcon />\r\n              <input type=\"text\" placeholder=\"Search or start new chat\"/>\r\n          </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar_chats\">\r\n          <Sidebarchat addNewChat />\r\n          {rooms.map(room => (\r\n            <Sidebarchat key={room.id} id={room.id} name={room.data.name}/>\r\n\r\n          ))}\r\n          \r\n          \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Chat.css\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\r\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport db from \"./firebaseConfig\";\r\nimport { useStateValue } from './StateProvider';\r\nimport firebase from \"firebase\";\r\nfunction Chat() {\r\n  const [seed, setSeed] = useState(\"\");\r\n  const [input, setInput] = useState(\"\");\r\n  const { roomId } = useParams();\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [{user}, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    if (roomId) {\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .onSnapshot((snapshot) => setRoomName(snapshot.data().name));\r\n\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, [roomId]);\r\n\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 5000));\r\n  }, []);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    console.log(input);\r\n\r\n    db.collection(\"rooms\").doc(roomId).collection(\"messages\")\r\n    .add({\r\n      message: input,\r\n      name: user.displayName,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n\r\n    });\r\n\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat_header\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/ ${seed}.svg`} />\r\n        <div className=\"chat_header_info\">\r\n          <h3>{roomName}</h3>\r\n          <p>Last seen{\" \"}\r\n          {\r\n            new Date(\r\n              messages[messages.length-1]?.\r\n              timestamp?.toDate()\r\n            ).toUTCString()\r\n          }\r\n          </p>\r\n        </div>\r\n        <div className=\"chat_header_right\">\r\n          <IconButton>\r\n            <SearchIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <AttachFileIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"chat_body\">\r\n        {messages.map((message) => (\r\n          <p className={`chat_message ${message.name === user.displayName && \"chat_receiver\"}`}>\r\n            <span className=\"chat_name\">{message.name}</span>\r\n            {message.message}\r\n            <span className=\"chat_timestamp\">\r\n              {new Date(message.timestamp?.toDate()).toUTCString()}\r\n            </span>\r\n          </p>\r\n        ))}\r\n      </div>\r\n      <div className=\"chat_footer\">\r\n        <EmojiEmotionsIcon />\r\n        <form>\r\n          <input\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder=\"Type a message\"\r\n            type=\"text\"\r\n          />\r\n          <button type=\"submit\" onClick={sendMessage}>\r\n            Send\r\n          </button>\r\n        </form>\r\n        <MicIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","export const initialState = {\r\n    user: null,\r\n};\r\n\r\nexport const actionType ={\r\n    SET_USER: \"SET_USER\",\r\n};\r\n\r\nconst reducer = (state, action) =>{\r\n    console.log(action);\r\n    switch(action.type){\r\n        case actionType.SET_USER:\r\n            return{\r\n                ...state,\r\n                user:action.user,\r\n            };\r\n            default:\r\n                return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react'\r\nimport \"./Login.css\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {auth, provider } from './firebaseConfig';\r\nimport { useStateValue } from './StateProvider';\r\nimport { actionType } from './reducer';\r\n\r\nfunction Login() {\r\n    const [{}, dispatch] = useStateValue();\r\n\r\n    const signIn = () =>{\r\n        auth.signInWithPopup(provider).then((result) => {\r\n            dispatch({\r\n                type: actionType.SET_USER,\r\n                user: result.user,\r\n            });\r\n        }).catch((error) => alert(error.message));\r\n    };\r\n\r\n    return (\r\n        <div className=\"login\">\r\n\r\n            <div className=\"login_container\">\r\n            <img src=\"https://img.icons8.com/officel/480/000000/chat.png\"/>\r\n\r\n                <div className=\"login_text\">\r\n                    <h1>Sign in to ChatApp</h1>\r\n                </div>\r\n                <Button onClick={signIn}>Sign In With Google</Button>\r\n            </div>\r\n            \r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\nimport Login from \"./Login\";\nimport { useStateValue } from './StateProvider';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [{user}, dispatch] = useStateValue();\n\n  return (\n    <div className=\"App\">\n      {!user ? (\n        <Login />\n      ):(\n      <div className=\"app_body\">\n        <Router>\n          <Sidebar />\n          <Switch>\n            <Route path=\"/rooms/:roomId\">\n              <Chat />\n            </Route>\n\n            <Route path=\"/\">\n              <Chat />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer, {initialState} from \"./reducer\";\nimport {StateProvider} from \"./StateProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState ={initialState} reducer={reducer}>\n    <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}